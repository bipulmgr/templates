name: Update Template Index

on:
  push:
    branches: [ main ]
    paths:
      - 'templates/*.yml'
      - 'templates/*.yaml'
  workflow_dispatch: # Allow manual trigger

permissions:
  contents: write

jobs:
  update-index:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        fetch-depth: 0

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Install PyYAML
      run: pip install PyYAML

    - name: Generate index.json
      run: |
        python3 << 'EOF'
        import os
        import json
        import yaml
        import glob
        from pathlib import Path

        def parse_yaml_template(file_path):
            """Parse a YAML template file and extract metadata."""
            try:
                with open(file_path, 'r', encoding='utf-8') as file:
                    content = yaml.safe_load(file)
                
                # Extract required fields
                name = content.get('name', 'Unknown Template')
                description = content.get('description', 'No description available')
                techstack = content.get('techstack', [])
                image_url = content.get('imageUrl', '')
                
                # Extract service names
                services = list(content.get('services', {}).keys())
                
                # Get filename
                filename = os.path.basename(file_path)
                
                return {
                    'name': name,
                    'techstack': techstack,
                    'description': description,
                    'iconUrl': image_url,
                    'services': services,
                    'filename': filename
                }
                
            except Exception as e:
                print(f"Error parsing {file_path}: {e}")
                return None

        def generate_index():
            """Generate index.json from all YAML templates."""
            templates_dir = Path('templates')
            
            if not templates_dir.exists():
                print("Error: templates/ directory not found")
                return
            
            # Find all YAML files in templates directory
            yaml_files = glob.glob(str(templates_dir / '*.yml')) + glob.glob(str(templates_dir / '*.yaml'))
            
            if not yaml_files:
                print("No YAML template files found in templates/ directory")
                return
            
            # Parse all templates
            templates = []
            for yaml_file in sorted(yaml_files):
                template_data = parse_yaml_template(yaml_file)
                if template_data:
                    templates.append(template_data)
                    print(f"✓ Parsed: {os.path.basename(yaml_file)}")
                else:
                    print(f"✗ Failed to parse: {os.path.basename(yaml_file)}")
            
            # Write index.json
            try:
                with open('index.json', 'w', encoding='utf-8') as f:
                    json.dump(templates, f, indent=2, ensure_ascii=False)
                
                print(f"\n✓ Generated index.json with {len(templates)} templates")
                
                # Print summary
                print("\nTemplate Summary:")
                for template in templates:
                    print(f"  - {template['name']} ({len(template['services'])} services)")
                    
            except Exception as e:
                print(f"Error writing index.json: {e}")

        # Generate the index
        generate_index()
        EOF

    - name: Check for changes
      id: verify-changed-files
      run: |
        if [ -n "$(git status --porcelain index.json)" ]; then
          echo "changed=true" >> $GITHUB_OUTPUT
          echo "Index.json has been updated"
        else
          echo "changed=false" >> $GITHUB_OUTPUT
          echo "No changes to index.json"
        fi

    - name: Commit and push changes
      if: steps.verify-changed-files.outputs.changed == 'true'
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        git add index.json
        git commit -m "Auto-update index.json from template changes"
        git push origin HEAD:main
